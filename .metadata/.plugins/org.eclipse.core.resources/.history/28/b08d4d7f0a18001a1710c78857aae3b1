package exam;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
 
/*那时有位聪明的国王就设计出了一种与将军传递军事命令的暗号。
国王事先与将军协定好几种数字组合(升序排列)及对应的军事暗号和破解方法:
数字暗号:命令]
0248:趁夜偷袭
1357:按兵不动
2678:立即撤退
某次军事行动，国王将-串密文"wgfieorzouhtrrot"写在纸条 上,并派亲信将纸条火速送至军营。将军打开纸条
之后马上会意开始破译密文，很快就在纸条下方写下了破译后的明文0248 (zerotwofourright), 开始了筹备起夜
晚的作战计划...
(注意:假设国王给出的密文永远都符合是小写字母组不会出现超出数字范畴不可达意的单词字母组合)
根据将军在纸条上留下的破译后的明文数字作为线索，写-段程序可以帮助将军快速破译国王的密文所对应的
数字暗号，并写下编程思路。*/

public class N5 {
	public String deCode(String cipher) {
		String result = "";
		Map<Character,Integer> map = new HashMap<Character, Integer>();
		char[] c = cipher.toCharArray();
		for(int i = 0; i< c.length; i++) {
			map.put(c[i], map.getOrDefault(c[i], 0)+1);
		}
		if(map.containsKey('z')) {
			result+=0;
			map.put('z', map.get('z')-1);
			map.put('e', map.get('e')-1);
			map.put('r', map.get('r')-1);
			map.put('o', map.get('o')-1);
			if(map.get('o')==0)map.remove('o');
		}
		if(map.containsKey('w')) {
			result+=2;
			map.put('w', map.get('w')-1);
			map.put('t', map.get('t')-1);
			map.put('o', map.get('o')-1);
			if(map.get('o')==0)map.remove('o');
			if(map.get('t')==0)map.remove('t');
		}
		if(map.containsKey('u')) {
			result+=4;
			map.put('f', map.get('f')-1);
			map.put('o', map.get('o')-1);
			map.put('u', map.get('u')-1);
			map.put('r', map.get('r')-1);
			if(map.get('o')==0)map.remove('o');
			if(map.get('f')==0)map.remove('f');
		}
		if(map.containsKey('x')) {
			result+=6;
			map.put('x', map.get('x')-1);
			map.put('s', map.get('s')-1);
			map.put('i', map.get('i')-1);
			if(map.get('s')==0)map.remove('s');
			if(map.get('i')==0)map.remove('i');
		}
		if(map.containsKey('g')) {
			result+=8;
			map.put('e', map.get('e')-1);
			map.put('i', map.get('i')-1);
			map.put('g', map.get('g')-1);
			map.put('h', map.get('h')-1);
			map.put('t', map.get('t')-1);
			if(map.get('t')==0)map.remove('t');
			if(map.get('i')==0)map.remove('i');
		}
		if(map.containsKey('o')) {
			result+=1;
			map.put('o', map.get('o')-1);
			map.put('n', map.get('n')-1);
			map.put('e', map.get('e')-1);
		}
		if(map.containsKey('t')) {
			result+=3;
			map.put('t', map.get('t')-1);
			map.put('h', map.get('h')-1);
			map.put('r', map.get('r')-1);
			map.put('e', map.get('e')-2);
		}
		if(map.containsKey('f')) {
			result+=5;
			map.put('f', map.get('f')-1);
			map.put('i', map.get('i')-1);
			map.put('v', map.get('v')-1);
			map.put('e', map.get('e')-1);
			if(map.get('i')==0)map.remove('i');
		}
		if(map.containsKey('s')) {
			result+=7;
			map.put('e', map.get('e')-2);
			map.put('v', map.get('v')-1);
			map.put('s', map.get('s')-1);
			map.put('n', map.get('n')-1);
		}
		if(map.containsKey('i')) {
			result+=9;
			map.put('e', map.get('e')-1);
			map.put('i', map.get('i')-1);
			map.put('n', map.get('n')-2);
		}
		return  result;
	}
	public static void main(String[] args) {
		 System.out.println(new N5().deCode("zerotwofourright"));
	}
}
