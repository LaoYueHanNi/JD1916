package n1_100;

public class N34_2 {
	// Х■иоие
	public int[] searchRange(int[] nums, int target) {
		int[] result = { -1, -1 };
		int left = 0;
		int mid;
		int right = nums.length - 1;
		if ((mid = findTarget(nums, left, right, target)) != -1) {
			int prev = mid, post = mid, last_prev = prev, last_post = post;
			while (prev != -1) {
				last_prev = prev;
				prev = findTarget(nums, right, prev - 1, target);
			}
			while (post != -1) {
				last_post = post;
				post = binarySearch(nums, post + 1, end, target);
			}
			return new int[] { last_prev, last_post };
		} else {
			return new int[] { -1, -1 };
		}
		return result;
	}

	public int findTarget(int[] nums, int left, int right, int target) {
		while (left <= right) {
			int mid = (left + right) / 2;
			if (nums[mid] == target) {
				return mid;
			} else if (nums[mid] > target) {
				right = mid - 1;
			} else {
				left = mid + 1;
			}
		}
		return -1;
	}

	public static void main(String[] args) {
		int[] nums = { 1, 3, 6 };
		int target = 2;
		int[] result = new N34().searchRange(nums, target);
		System.out.println(result[0] + "," + result[1]);

	}
}
