package n1_100;

public class N4_2 {
	public double findMedianSortedArrays(int[] nums1, int[] nums2) {
		
		if(nums1.length>nums2.length) {
			int[] temp=nums1;
			nums1 = nums2;
			nums2 = temp;
		}
		
		int length1 = nums1.length;
		int length2 = nums2.length;
		int left = 0 ; 
		int right = length1;
		int countHalf = (length1+length2+1)/2;
		//左边有(m+n+1)/2个元素,等于i+j
		while(left<=right) {
			int i = (left+right)>>>1;
			int j = countHalf-i;
			if(nums1[i]<nums2[j-1]) {
				left = i+1;
			}else {
				right = i;
			}
		}
		int i = left;
		int j = countHalf - i;
		
		int nums1LeftMax = i == 0 ? Integer.MIN_VALUE : nums1[i - 1];
        int nums1RightMin = i == length1 ? Integer.MAX_VALUE : nums1[i];

        int nums2LeftMax = j == 0 ? Integer.MIN_VALUE : nums2[j - 1];
        int nums2RightMin = j == length2 ? Integer.MAX_VALUE : nums2[j];
        
        if (((m + n) & 1) == 1) {
            return Math.max(nums1LeftMax, nums2LeftMax);
        } else {
            return (double) ((Math.max(nums1LeftMax, nums2LeftMax) + Math.min(nums1RightMin, nums2RightMin))) / 2;
        }

	}
}
